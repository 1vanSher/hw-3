// stores/CategoryFilterStore.ts
import { makeAutoObservable } from 'mobx';
import { ProductCategory } from '@/types/product';
import { productsApi } from '@/api/productsApi';
import { Option } from '@/types/category';
import { Product } from '@/types/product';

export interface CategoryFilterState {
  selectedCategoryIds: string[];
  categories: ProductCategory[];
  isLoading: boolean;
}

export class CategoryFilterStore {
  state: CategoryFilterState = {
    selectedCategoryIds: [],
    categories: [], // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤–º–µ—Å—Ç–æ null
    isLoading: false
  };

  constructor() {
    makeAutoObservable(this);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–µ—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
  loadCategoriesFromProducts = async (): Promise<void> => {
    this.state.isLoading = true;
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const response = await productsApi.getProductsPaginated(1, 100); // –ë–æ–ª—å—à–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      const categoriesMap = new Map();
      
      response.data.forEach((product: Product ) => {
        if (product.productCategory) {
          categoriesMap.set(product.productCategory.id, product.productCategory);
        }
      });
      
      this.state.categories = Array.from(categoriesMap.values());
      
      console.log('üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', this.state.categories.length);
      
    } catch (error) {
      console.error('Failed to load categories from products:', error);
      this.state.categories = [];
    } finally {
      this.state.isLoading = false;
    }
  };

  // –ò–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
  loadCategoriesAlternative = async (): Promise<void> => {
    this.state.isLoading = true;
    try {
      // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π endpoint –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null
      const response = await productsApi.getCategories();
      
      if (response.data === null) {
        console.log('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª–æ null, –ø—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
        await this.loadCategoriesFromProducts();
        return;
      }
      
      this.state.categories = response.data || [];
      
    } catch (error) {
      console.error('Failed to load categories:', error);
      await this.loadCategoriesFromProducts(); // Fallback
    } finally {
      this.state.isLoading = false;
    }
  };

  setSelectedCategories = (categoryIds: string[]): void => {
    this.state.selectedCategoryIds = categoryIds;
  };

  clearFilter = (): void => {
    this.state.selectedCategoryIds = [];
  };

  get categoryOptions(): Option[] {
    return this.state.categories.map(category => ({
      key: category.id.toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É
      value: category.name || category.name || 'Unnamed Category'
    }));
  }

  get selectedOptions(): Option[] {
    return this.state.categories
      .filter(category => this.state.selectedCategoryIds.includes(category.id.toString()))
      .map(category => ({
        key: category.id.toString(),
        value: category.name || category.name || 'Unnamed Category'
      }));
  }

  get isFilterActive(): boolean {
    return this.state.selectedCategoryIds.length > 0;
  }
}

export const categoryFilterStore = new CategoryFilterStore();